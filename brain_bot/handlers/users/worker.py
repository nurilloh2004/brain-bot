from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery, InputFile, ContentType
from loader import dp
from states.workerData import WorkerData
from keyboards.default.branch import branch_key
from keyboards.default.position import position_key
from keyboards.default.contact import contact_key
from keyboards.default.branch_position import branch_position_key
from keyboards.default.back import back_key
from keyboards.default.menu import menu
from aiogram.types import Message, CallbackQuery

from data.config import ADMINS, CHANNELS
from keyboards.inline.confirm import confirmation_keyboard, post_callback

PHONE_NUM = r'^[\+]?[(]?[0-9]{3}[)]?[-\s\.]?[0-9]{3}[-\s\.]?[0-9]{4,6}$'


@dp.message_handler(text="ü§µ‚Äç‚ôÇÔ∏è “≤–æ–¥–∏–º–ª–∞—Ä —É—á—É–Ω", state=None)
async def worker_menu(message: Message):
    await message.answer('“ö—É–π–∏–¥–∞–≥–∏–ª–∞—Ä–¥–∞–Ω –±–∏—Ä–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥', reply_markup=branch_position_key)


@dp.message_handler(text='–õ–∞–≤–æ–∑–∏–º –≤–∞ –§–∏–ª–∏–∞–ª —û–∑–≥–∞—Ä—Ç–∏—Ä–∏—à', state=None)
async def enter_name(message: types.Message):
    await message.answer("üôé‚Äç‚ôÇÔ∏è –ò—Å–º, –§–∞–º–∏–ª–∏—è –≤–∞ –®–∞—Ä–∏—Ñ–∏–Ω–≥–∏–∑–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥:", reply_markup=back_key)
    await WorkerData.name.set()

@dp.message_handler(state=WorkerData.name)
async def worker_name(message: types.Message, state: FSMContext):
    name = message.text

    await state.update_data(
        {"name": name}
    )
    await message.answer("üìÖ –¢—É“ì–∏–ª–≥–∞–Ω —Å–∞–Ω–∞–Ω–≥–∏–∑ :–ö–ö.–û–û.–ô–ô–ô–ô(13.12.1997) —Ñ–æ—Ä–º–∞—Ç–∏–¥–∞:", reply_markup=back_key)
    await WorkerData.next()

@dp.message_handler(state=WorkerData.birth_date)
async def worker_birth(message: Message, state: FSMContext):
    birth_date = message.text
    await state.update_data(
        {
            "birth_date": birth_date
        }
    )
    await message.answer('üìû –¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑ +998—Ö—Ö—Ö—Ö—Ö—Ö—Ö—Ö—Ö —Ñ–æ—Ä–º–∞—Ç–∏–¥–∞:', reply_markup=contact_key)
    await WorkerData.next()


@dp.message_handler(lambda message: not message.text.isdigit(), state=WorkerData.phonenum)
async def process_phone_invalid(message: types.Message):
    return await message.reply("“ö—É–ª–∞–π–ª–∏–∫ —É—á—É–Ω “õ—É–π–∏–¥–∞–≥–∏ —Ç—É–≥–º–∞–Ω–∏ –±–æ—Å–∏–Ω–≥!")

@dp.message_handler(state=WorkerData.phonenum, content_types='contact')
async def answer_phonenum(message: types.Message, state: FSMContext):
    phonenum = message.contact.phone_number
    async with state.proxy() as data:
        data["phonenum"] = phonenum
        # data["phonenum2"] += 1
    await message.answer("üè´ –ê–π–Ω–∏ –≤–∞“õ—Ç–¥–∞ —Å–∏–∑ “õ–∞–π—Å–∏ —Ñ–∏–ª–∏–∞–ª–¥–∞ –∏—à–ª–∞–π—Å–∏–∑?", reply_markup=branch_key)
    await WorkerData.next()

@dp.message_handler(state=WorkerData.branch_name)
async def worker_branch(message: Message, state: FSMContext):
    branch_name = message.text
    await state.update_data(
        {"branch_name": branch_name}
    )
    await message.answer("üë®üèª‚Äçüíº “ö–∞–π—Å–∏ –ª–∞–≤–æ–∑–∏–º–¥–∞ –∏—à–ª–∞–π—Å–∏–∑?", reply_markup=position_key)
    await WorkerData.next()

@dp.message_handler(state=WorkerData.position)
async def worker_position(message: Message, state: FSMContext):
    position = message.text
    await state.update_data(
        {"position": position}
    )

    await message.answer("üè´ –°–∏–∑ “õ–∞–π—Å–∏ —Ñ–∏–ª–∏–∞–ª–¥–∞ –∏—à–ª–∞—à–Ω–∏ —Ö–æ“≥–ª–∞–π—Å–∏–∑?", reply_markup=branch_key)
    await WorkerData.next()


@dp.message_handler(state=WorkerData.new_branch)
async def worker_newbranch(message: Message, state: FSMContext):
    new_branch = message.text
    await state.update_data(
        {"new_branch": new_branch}
    )

    await message.answer("üë®üèª‚Äçüíº “ö–∞–π—Å–∏ –ª–∞–≤–æ–∑–∏–º–¥–∞ –∏—à–ª–∞—à–Ω–∏ —Ö–æ“≥–ª–∞–π—Å–∏–∑?", reply_markup=position_key)
    await WorkerData.next()

@dp.message_handler(state=WorkerData.new_position)
async def worker_newposition(message: Message, state: FSMContext):
    new_position = message.text
    await state.update_data(
        {"new_position": new_position}
    )
    await message.answer("‚ÅâÔ∏è –ù–∏–º–∞ —Å–∞–±–∞–±–¥–∞–Ω —Ñ–∏–ª–∏–∞–ª —ë–∫–∏ –ª–∞–≤–æ–∑–∏–º–∏–Ω–≥–∏–∑–Ω–∏ —û–∑—Ä–∞–≥—Ç–∏—Ä–º–æ“õ—á–∏—Å–∏–∑?", reply_markup=ReplyKeyboardRemove())
    await WorkerData.next()

@dp.message_handler(state=WorkerData.cause)
async def worker_cause(message: Message, state: FSMContext):
    cause = message.text
    await state.update_data(
        {'cause': cause}
    )
    await message.answer('‚úÖ –Ø–Ω–≥–∏ –ª–∞–≤–æ–∑–∏–º —ë–∫–∏ —Ñ–∏–ª–∏–∞–ª–≥–∞ —û—Ç—Å–∞–Ω–≥–∏–∑ –Ω–∏–º–∞ —è–Ω–≥–∏–ª–∏–∫–ª–∞—Ä “õ–∏–ª–∞—Å–∏–∑?')
    await WorkerData.next()

@dp.message_handler(state=WorkerData.news)
async def worker_news(message: Message, state: FSMContext):
    news = message.text
    await state.update_data(
        {"news": news}
    )
    await message.answer("<b>üßæ –ú–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä –±–∞—Ä—á–∞—Å–∏ —Ç—û–≥—Ä–∏–ª–∏–≥–∏–≥–∞ —ç—ä—Ç–∏–±–æ—Ç “õ–∏–ª–∏–Ω–≥</b>", reply_markup=menu)
    await WorkerData.next()



    data = await state.get_data()
    name = data.get("name")
    birth_date = data.get('birth_date')
    phonenum = data.get('phonenum')
    branch_name = data.get('branch_name')
    position = data.get('position')
    new_branch = data.get('new_branch')
    new_position = data.get('new_position')
    cause = data.get('cause')
    news = data.get('news')

    msg = "<b>“ö—É–π–∏–¥–∞–≥–∏ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä “õ–∞–±—É–ª “õ–∏–ª–∏–Ω–¥–∏:</b>\n"
    msg += f"<b>üë§ –§.–ò.–®:</b> -<code> {name}</code>\n"
    msg += f"<b>üìÜ –¢—É“ì–∏–ª–≥–∞–Ω –≤–∞“õ—Ç–∏:</b> -<code> {birth_date}</code>\n"
    msg += f"<b>üìû –¢–µ–ª–µ—Ñ–æ–Ω:</b> -<code> {phonenum}</code>\n"
    msg += f"<b>üè´ –§–∏–ª–∏–∞–ª –Ω–æ–º–∏:</b> -<code> {branch_name}</code>\n"
    msg += f"<b>üß∞ –õ–∞–≤–æ–∑–∏–º:</b> -<code> {position}</code>\n"
    msg += f"<b>üè´ –Ø–Ω–≥–∏ —Ñ–∏–ª–∏–∞–ª:</b> -<code> {new_branch}</code>\n"
    msg += f"<b>üß∞ –Ø–Ω–≥–∏ –ª–∞–≤–æ–∑–∏–º:</b> -<code>{new_position}</code>\n"
    msg += f"<b>‚ÅâÔ∏è –°–∞–±–∞–±:</b> -<code>{cause}</code>\n"
    msg += f"<b>‚úÖ –Ø–Ω–≥–∏–ª–∏–∫:</b> -<code>{news}</code>\n"

    await message.answer(msg, reply_markup=confirmation_keyboard)
    await WorkerData.next()

@dp.callback_query_handler(post_callback.filter(action="post"))
async def approve_post(call: CallbackQuery):
    await call.answer("–ß–æ–ø —ç—Ç–∏—à–≥–∞ —Ä—É“≥—Å–∞—Ç –±–µ—Ä–¥–∏–Ω–≥–∏–∑.", show_alert=True)
    message = await call.message.edit_reply_markup()
    target_channel = CHANNELS[0]
    await message.send_copy(target_channel)



@dp.callback_query_handler(post_callback.filter(action="cancel"))
async def cancel_post(call: CallbackQuery, state: FSMContext):
    await call.answer("–ê—Ä–∏–∑–∞–Ω–≥–∏–∑–Ω–∏ —Ä–∞–¥ “õ–∏–ª–¥–∏–Ω–≥–∏–∑!")
    await call.message.edit_reply_markup()
    await call.message.answer("–ê—Ä–∏–∑–∞ —Ä–∞–¥ —ç—Ç–∏–ª–¥–∏.")


@dp.message_handler(state=WorkerData.confirm)
async def post_unknown(message: Message):
    await message.answer("–Æ–±–æ—Ä–∏—à —ë–∫–∏ –±–µ–∫–æ—Ä “õ–∏–ª—à–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥")

